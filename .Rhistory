mInfo<- c("LL"=LL,"dev"=dev,"AIC"=AIC,"BIC"=BIC,"N"=N, "p"=p, "ids"=ids)
mInfo
mInfo
N
sd
sd/sqrt(N)
sd
sd/sqrt(8)
sd/sigma(model)
sigma(model)/sd
lme4:::ranef.merMod(model)$id
mRE<- VarCorr(model)
mRE
str(mRE)
mRE$id
attr(mRE$id,"stddev")
attr(mRE$id,"correlation")
mRE<-     data.frame(     summary(model)$varcor$id   ) # covariance matrix of RE
mRE
mRE<- VarCor(model)
VarCor(model)
mRE<- VarCorr(model)
mRE
str(VarCorr(model))
VarCorr(model)$id
mRE<- data.frame(VarCorr(model)$id)
View(mRE)
mRE<-     data.frame(     summary(model)$varcor$id   ) # covariance matrix of RE
mRE
mRE<- data.frame(VarCorr(model)$id)
mRE
mREcor<-  data.frame(attr(summary(model)$varcor$id,"correlation")) # corrleation
mREcor
mREcor<- data.frame( attr(VarCorr(model)$id,"correlation")
mREcor
mREcor<- data.frame( attr(VarCorr(model)$id,"correlation"))
mREcor
mREsd<-   data.frame( (attr(summary(model)$varcor$id,"stddev")))
mREsd
mREsd<-   data.frame(SD=(attr(summary(model)$varcor$id,"stddev")))
mREsd
mREsd
mRE
RE<- lme4:::ranef.merMod(model)$id
RE
summary(model)$varcor$id
str(summary(model)$varcor$id)
a<- matrix(summary(model)$varcor$id)
a
a<- diag(summary(model)$varcor$id)
a
mFE<- (summary(model)$vcov@factors$correlation) # notice that this is object of
mFE
str(summary(model)$vcov)
# similar ways to extract FE estimates, #3 is the fullest
FE<- fixef(model) #1
FE
mFE<- (summary(model)$vcov@factors$correlation) # notice that this is object of
mFE
summary(model)
str(summary(model)$vcov)
mFE<- (summary(model)$vcov@factors$correlation) # notice that this is object of class corMatrix
mFE
VarCorr(model)
print(model)
summary(model)
str(summary(model))
FE<- fixef(model) #1
FE
FE<- summary(model)$coefficients
FE
dsp<- data.frame(getME(model,"X")) # no Y, only predictors (with interaction terms)
head(dsp,13)
dsp<- data.frame(getME(model,"X")) # no Y, only predictors (with interaction terms)
dsp$id<-getME(model,"flist")$id # first level grouping factor, individual
dsp$y<-getME(model,"y") # response vector
dsp$yHat<- predict(model) # predicted values
dsp$resid<- lme4:::residuals.merMod(model)
identical (  dsp$y-dsp$yHat, dsp$resid)
head(dsp,13)
modnum<-"m10"
modnum
cat(modnum)
dsL<-readRDS("./Data/Derived/dsL.rds")
ds<- dsL %>% dplyr::filter(id %in% c(1:200),year %in% c(2000:2011)) %>%
dplyr::mutate(timec=year-2000, timec2= timec^2, timec3= timec^3,
agec= round( (agemon/12),0)-16) %>%
dplyr::select(id,year,attend, timec,timec2, timec3, agec)
head(ds, 20)
modnum<-"m10"
cat(modnum) <-lmer (attend ~
1  + agec + timec + timec2 + timec3
+ agec:timec +agec:timec2 + agec:timec3
+ (1 + timec + timec2 + timec3 | id),
data = ds, REML=0)
model<- cat(modnum)
modnum<-cat("m10")
dsL<-readRDS("./Data/Derived/dsL.rds")
ds<- dsL %>% dplyr::filter(id %in% c(1:200),year %in% c(2000:2011)) %>%
dplyr::mutate(timec=year-2000, timec2= timec^2, timec3= timec^3,
agec= round( (agemon/12),0)-16) %>%
dplyr::select(id,year,attend, timec,timec2, timec3, agec)
head(ds, 20)
modelNumber<- "m10"
modnum<-cat(modelNumber)
modnum <-lmer (attend ~
1  + agec + timec + timec2 + timec3
+ agec:timec +agec:timec2 + agec:timec3
+ (1 + timec + timec2 + timec3 | id),
data = ds, REML=0)
model<- modnum
summary(model)
model@call # 1
(summary(model))$call #2
# get indicies
mInfo<-summary(model)$AICtab
mInfo
# extract RE covariance matrix
mRE<-     data.frame(     summary(model)$varcor$id   ) # covariance matrix of RE
mREcor<-  data.frame(attr(summary(model)$varcor$id,"correlation")) # corrleation matrix of RE
mREsd<-   data.frame( (attr(summary(model)$varcor$id,"stddev")))
RE<- lme4:::ranef.merMod(model)$id
head(RE,13)
mRE
cor(RE)  # not the same as mRE, find out why
var(RE)  # not the same as mRE, find out why
# similar ways to extract FE estimates, #3 is the fullest
FE<- summary(model)$coefficients
FE
mFE<- (summary(model)$vcov@factors$correlation) # notice that this is object of
mFE
dsp<- data.frame(getME(model,"X")) # no Y, only predictors (with interaction terms)
dsp$id<-getME(model,"flist")$id # first level grouping factor, individual
dsp$y<-getME(model,"y") # response vector
dsp$yHat<- predict(model) # predicted values
dsp$resid<- lme4:::residuals.merMod(model)
identical (  dsp$y-dsp$yHat, dsp$resid)
head(dsp,13)
sigma(model) # std.error of residuals <- this methods is preferred
# however
sd(dsp$resid) # not the same as sigma(model) = find out why
identical (sigma(model),sd(dsp$resid)) # WHY?
FE <- fixef(model)
# use fixed effects estimates to find conditional predictions
dsp$yPar<-(
(FE["(Intercept)"])         +(FE["agec"]*dsp$agec)
+(FE["timec"]*dsp$timec)    +(FE["agec:timec"]*dsp$agec*dsp$timec)
+(FE["timec2"]*dsp$timec2)  +(FE["agec:timec2"]*dsp$agec*dsp$timec2)
+(FE["timec3"]*dsp$timec3)  +(FE["agec:timec3"]*dsp$agec*dsp$timec3)
)
head(dsp,13)
mInfo
RE
mRE
mREcor
diag(mRE)
diag(matrix(mRE))
mREsd<-   data.frame( (attr(summary(model)$varcor$id,"stddev")))
mREsd
mREsd<-   data.frame(STD= (attr(summary(model)$varcor$id,"stddev")))
mREsd
mRE<-   data.frame(sd= (attr(summary(model)$varcor$id,"stddev")),
var=sd^2)
mRE<-   data.frame(sd= (attr(summary(model)$varcor$id,"stddev")),
var= I(sd^2))
mRE<-   data.frame(sd= (attr(summary(model)$varcor$id,"stddev")))
mRE$var<- mRE$sd^2
mRE
summary(model)
mInfo
mInfo<-summary(model)$AICtab
mINfo$N<- model@devcomp$dims["N"] # number of datapoints, verify
mInfo$p<- model@devcomp$dims["p"] # number of estimated parameters, verify
mInfor$ids<- (summary(model))$ngrps # number of units on level-2, here: individuals
mInfo
mInfo
mInfo<-summary(model)$AICtab
mInfo
mInfo$N<- model@devcomp$dims["N"] # number of datapoints, verify
mInfo<-summary(model)$AICtab
mInfo["N"]<- model@devcomp$dims["N"] # number of datapoints, verify
mInfo
mInfo<-summary(model)$AICtab
mInfo["N"]<- model@devcomp$dims["N"] # number of datapoints, verify
mInfo["p"]<- model@devcomp$dims["p"] # number of estimated parameters, verify
mInfo["ids"]<- (summary(model))$ngrps # number of units on level-2, here: individuals
mInfo
mInfo
mRE
mREcov
mREcor
mREcov<-     data.frame(     summary(model)$varcor$id   ) # covariance matrix of RE
mREcor<-  data.frame(attr(summary(model)$varcor$id,"correlation")) # corrleation matrix of RE
mRE<-   data.frame(sd= (attr(summary(model)$varcor$id,"stddev")))
mRE$var<- mRE$sd^2
R
RE<- lme4:::ranef.merMod(model)$id
head(RE,13)
mRE
cor(RE)  # not the same as mRE, find out why
var(RE)  # not the same as mRE, find out why
FE # vector of fixed effects
FE<- summary(model)$coefficients
FE
summary(model)$coefficients
FE<- summary(model)$coefficients
FE
sigma<-sigma(model) # std.error of residuals <- this methods is preferred
sigma
str(model@call)
str(summary(model)$call)
mRE
m<-mRE["var","sd"]
mRE
mRE<-mRE[c("var","sd")]
mRE
summary(model)
mInfo
mRE  # variances and standard deviations of random effects
mREcov # covariance matrix of Random Effects
mREcor # correlation  matrix of Random Effects
FE # estimates of Fixed Effects, SE, t-value
mFE # matrix of correlations among Fixed Effects
sigma # standard error of residual
sd(dsp$resid)
SD<-sd(dsp$resid)
sigma/SD
SDR<-sd(dsp$resid) # not the same as sigma(model) = find out why
SDR
sigma
SDR
identical (sigma, SDR) # WHY?
identical ( round(sigma/SDR,2), round(SDR))
round(sigma/SDR,2)
round(SDR)
identical ( round(sigma/SDR,2), round(SDR,2)
identical ( round(sigma/SDR,2), round(SDR,2))
identical ( round(sigma/SDR,2), round(SDR,2))
round(SDR,2)
sigma/SDR
SDR
sigma
summary(model)
sqrt(sigma/SDR)
sqrt(sigma/SDR)
sigma
SDR
sqrt(sigma/SDR)
FE
sigma
head(dsp,13) # input + output + residual + conditional
paste0(modnum,"F")
modnum
cat(paste0(modelNumber,"F"))
cat(paste0(modelNumber,"F")) <- c(mInfo,mRE,mREcov,mREcor,FE,mFE,sigma,dsp)
cat(paste0(modelNumber,"F"))
cat(paste0(modelNumber,"F"))<- c(mInfo,mRE,mREcov,mREcor,FE,mFE,sigma,dsp)
paste0(modelNumber,"F")
cat( paste0(modelNumber,"F") )
cat( paste0(modelNumber,"F") )<- 1
cat(modelNumber)<- 1
modnum<-cat(modelNumber)
modnum
modnum<-cat(modelNumber)
modnum
cat(modelNumber)
paste0(modnum,"F")
paste0(modnum,"F")
paste0(modelNumber,"F")
cat(paste0(modelNumber,"F"))
cat(paste0(modelNumber,"F")) <- 1
modelSave<-cat(paste0(modelNumber,"S"))
modelSave<- c(mInfo,mRE,mREcov,mREcor,FE,mFE,sigma,dsp)
modS<- c(mInfo,mRE,mREcov,mREcor,FE,mFE,sigma,dsp) # model save
str(modS)
modS<- list(mInfo,mRE,mREcov,mREcor,FE,mFE,sigma,dsp) # model save
str(modS)
rm(list=ls(all=TRUE))  #Clear the variables from previous runs.
pathReport<-   base::file.path("./Models/LCM/singleModel.Rmd")
library(dplyr)
rmarkdown::render(input = pathReport,
output_format=c(
"pdf_document"
#                       ,"word_document"
,"md_document"
,"html_document"
),clean=TRUE)
rm(list=ls(all=TRUE))  #Clear the variables from previous runs.
pathReport<-   base::file.path("./Models/LCM/lmerGuide.Rmd")
library(dplyr)
rmarkdown::render(input = pathReport,
output_format=c(
"pdf_document"
#                       ,"word_document"
,"md_document"
,"html_document"
),clean=TRUE)
rm(list=ls(all=TRUE))  #Clear the variables from previous runs.
pathReport<-   base::file.path("./Models/LCM/lmerGuide.Rmd")
library(dplyr)
rmarkdown::render(input = pathReport,
output_format=c(
#                       "pdf_document"
#                       ,"word_document"
"md_document"
,"html_document"
),clean=TRUE)
rm(list=ls(all=TRUE))  #Clear the variables from previous runs.
pathReport<-   base::file.path("./Models/LCM/lmerGuide.Rmd")
library(dplyr)
rmarkdown::render(input = pathReport,
output_format=c(
#                       "pdf_document"
#                       ,"word_document"
#                       "md_document"
"html_document"
),clean=TRUE)
rm(list=ls(all=TRUE))  #Clear the variables from previous runs.
pathReport<-   base::file.path("./Models/LCM/lmerGuide.Rmd")
library(dplyr)
rmarkdown::render(input = pathReport,
output_format=c(
#                       "pdf_document"
#                       ,"word_document"
"md_document"
#                     "html_document"
),clean=TRUE)
install.packages("knitr")
rm(list=ls(all=TRUE))  #Clear the variables from previous runs.
pathReport<-   base::file.path("./Models/LCM/lmerGuide.Rmd")
library(dplyr)
rmarkdown::render(input = pathReport,
output_format=c(
#                       "pdf_document"
#                       ,"word_document"
"md_document"
#                     "html_document"
),clean=TRUE)
rm(list=ls(all=TRUE))  #Clear the variables from previous runs.
pathReport<-   base::file.path("./Models/LCM/singleModel.Rmd")
library(dplyr)
rmarkdown::render(input = pathReport,
output_format=c(
#                       "pdf_document"
#                       ,"word_document"
"md_document"
#                     "html_document"
),clean=TRUE)
modelNumber<- "m10"
numID<- 10000
modnum<-cat(modelNumber)
dsL<-readRDS("./Data/Derived/dsL.rds")
ds<- dsL %>% dplyr::filter(id %in% c(1:numID),year %in% c(2000:2011)) %>%
dplyr::mutate(timec=year-2000, timec2= timec^2, timec3= timec^3,
agec= round( (agemon/12),0)-16) %>%
dplyr::select(id,year,attend, timec,timec2, timec3, agec)
head(ds, 20)
modnum <-lmer (attend ~
1  + agec + timec + timec2 + timec3
+ agec:timec +agec:timec2 + agec:timec3
+ (1 + timec + timec2 + timec3 | id),
data = ds, REML=0, maxIter = 10000)
model<- modnum
summary(model)
table(dsL$sample,dsL$race)
modnum<-cat(modelNumber)
dsL<-readRDS("./Data/Derived/dsL.rds")
ds<- dsL %>% dplyr::filter(race==4,year %in% c(2000:2011)) %>%
dplyr::mutate(timec=year-2000, timec2= timec^2, timec3= timec^3,
agec= round( (agemon/12),0)-16) %>%
dplyr::select(id,year,attend, timec,timec2, timec3, agec)
head(ds, 20)
modnum <-lmer (attend ~
1  + agec + timec + timec2 + timec3
+ agec:timec +agec:timec2 + agec:timec3
+ (1 + timec + timec2 + timec3 | id),
data = ds, REML=0, maxIter = 10000)
model<- modnum
summary(model)
modnum<-cat(modelNumber)
dsL<-readRDS("./Data/Derived/dsL.rds")
ds<- dsL %>% dplyr::filter(race==4,year %in% c(2000:2011)) %>%
dplyr::mutate(timec=year-2000, timec2= timec^2, timec3= timec^3,
agec= round( (agemon/12),0)-16) %>%
dplyr::select(id,year,attend, timec,timec2, timec3, agec)
head(ds, 20)
head(ds, 100)
dplyr::select(id,year,attend)
modnum<-cat(modelNumber)
dsL<-readRDS("./Data/Derived/dsL.rds")
ds<- dsL %>% dplyr::filter(race==4,year %in% c(2000:2011)) %>%
dplyr::mutate(timec=year-2000, timec2= timec^2, timec3= timec^3,
agec= round( (agemon/12),0)-16) %>%
dplyr::select(id,year,attend)
head(ds, 100)
ds <- read.table(header = TRUE, text ="
id year attend
1 2007      1
1 2008      1
1 2009      1
1 2010      1
1 2011      1
8 2007      3
8 2008     NA
8 2009      3
8 2010     NA
8 2011      3
9 2007      2
9 2008      3
9 2009      3
9 2010      5
9 2011      5
10 2007      4
10 2008      4
10 2009      2
10 2010     NA
10 2011     NA
")
ds
modnum<-cat(modelNumber)
dsL<-readRDS("./Data/Derived/dsL.rds")
ds<- dsL %>% dplyr::filter(race==4,year %in% c(2000:2011)) %>%
dplyr::filter(!ave(attend, id, FUN = function(x) any(is.na(x)))) %>%
dplyr::mutate(timec=year-2000, timec2= timec^2, timec3= timec^3,
agec= round( (agemon/12),0)-16) %>%
dplyr::select(id,year,attend, timec,timec2, timec3, agec)
head(ds, 10)
head(ds, 100)
length(unique(ds$id))
modnum<-cat(modelNumber)
dsL<-readRDS("./Data/Derived/dsL.rds")
ds<- dsL %>% dplyr::filter(race==4,year %in% c(2000:2011)) %>%
dplyr::filter(!ave(attend, id, FUN = function(x) any(is.na(x)))) %>%
dplyr::mutate(timec=year-2000, timec2= timec^2, timec3= timec^3,
agec= round( (agemon/12),0)-16) %>%
dplyr::select(id,year,attend, timec,timec2, timec3, agec)
modnum <-lmer (attend ~
1  + agec + timec + timec2 + timec3
+ agec:timec +agec:timec2
+ (1 + timec + timec2  | id),
data = ds, REML=0, maxIter = 1000)
model<- modnum
modnum <-lmer (attend ~
1  + agec + timec + timec2
+ agec:timec +agec:timec2
+ (1 + timec + timec2  | id),
data = ds, REML=0, maxIter = 1000)
model<- modnum
modnum <-lmer (attend ~
1  + agec + timec + timec2
+ agec:timec +agec:timec2
+ (1 + timec | id),
data = ds, REML=0)
model<- modnum
modnum <-lmer (attend ~
1  + agec + timec + timec2
+ agec:timec +agec:timec2
+ (1 + timec | id),
data = ds, REML=0, control=lmerControl(optCtrl=list(maxfun=20000))
model<- modnum
modnum <-lmer (attend ~
1  + agec + timec + timec2
+ agec:timec +agec:timec2
+ (1 + timec | id),
data = ds, REML=0, control=lmerControl(optCtrl=list(maxfun=20000)))
model<- modnum
modnum <-lm (attend ~ 1  + agec + timec + timec2
+ agec:timec +agec:timec2, data = ds)
model<- modnum
m <-lm (attend ~ 1  + agec + timec + timec2
+ agec:timec +agec:timec2, data = ds)
lm (attend ~ 1  + agec + timec + timec2
+ agec:timec +agec:timec2, data = ds)
summary(m)
m <-lm (attend ~ 1  + agec + timec + timec2
+ agec:timec +agec:timec2 (1|id), data = ds)
summary(m)
m <-lm (attend ~ 1  + agec + timec + timec2
+ agec:timec +agec:timec2 (1|id), data = ds)
m <-lm (attend ~ 1  + agec + timec + timec2
+ agec:timec +agec:timec2, (1|id), data = ds)
summary(m)
m <-lm (attend ~ 1  + agec + timec + timec2
+ agec:timec +agec:timec2, (1|id), data = ds)
summary(m)
summary(m)
m <-lmer (attend ~
1  + timec + timec2
+ (1 + timec + timec2 | id),
data = ds, REML=0)
summary(m)
(m8 <-lmer (attend ~
1  + timec + timec2 + timec3 + agec
+ agec:timec
+ (1 + timec + timec2 + timec3 | id),
data = ds, REML=0))
(m <-lmer (attend ~
1  + timec + timec2
+ (1 + timec + timec2 | id),
data = ds, REML=0))
(m <-lmer (attend ~
1  + timec + timec2
+ (1  | id),
data = ds, REML=0))
(m <-lmer (attend ~
1  + timec + timec2
+ (1 + timec | id),
data = ds, REML=0))
(m <-lmer (attend ~
1  + timec + timec2
+ (1 | id),
data = ds, REML=0))
