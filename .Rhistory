# ds$Coefficient<- factor(c("AIC","BIC","deviance"))
head(ds,9)
# possible pallets
colorFit <- c("BIC"="#8da0cb", "AIC"="#fc8d62", "deviance"="#66c2a5")
# colorFit <- c("BIC"="grey", "AIC"="tomato", "deviance"="green")
# colorFit <- c("BIC"="#bebada", "AIC"="#8dd3c7", "deviance"="#ffffb3") #b2df8a
# colorFit <- c("BIC"="#8da0cb", "AIC"="#d95f02", "deviance"="#b2df8a")
p <- ggplot2::ggplot(ds, aes(x= reorder(model, value), y=value, fill= Coefficient, group=model))
p <- p + geom_bar( stat="identity", position="dodge", alpha=.5)
p<- p + scale_fill_manual(values=colorFit)
p<- p + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p<- p + scale_x_discrete(limits=modelList2)
# p<- p + scale_y_continuous( limits = c(80000, 110000))
p
###################
# Read in different REDS files and join them all together
pathDataDirectory <- file.path("./Models/LCM/models/datasets")
# filenamePattern <- ".+\\.rds" #All RDS files
filenamePattern <- "m.{1,}Info\\.rds" #All RDS files
retrievedFilenames <- list.files(path=pathDataDirectory, pattern=filenamePattern)
filePaths <- file.path(pathDataDirectory, retrievedFilenames)
dsInfo <- readRDS(filePaths[1])
for( i in 1:length(filePaths) ) {
# To debug, change the '6' to some number to isolate the problem: for( i in 2:6 ) {
# message("About to read", filePaths[i], "\\")
dsInfoSingle <- readRDS(filePaths[i])
dsInfo <- plyr::join(x=dsInfo, y=dsInfoSingle, by="Coefficient", type="left", match="all")
rm(dsInfoSingle)
}
modelsFE <- c(  "m0F", "m1F", "m2F", "m3F", "m4F", "m5F", "m6F", "m7F")
otherFE<- c("mFa", "mFb", "mFc", "mFd","mFe")
modelsR1 <- c("m0R1", "m1R1", "m2R1", "m3R1", "m4R1", "m5R1", "m6R1", "m7R1")
otherR1<- c ("mR1a", "mR1b", "mR1c", "mR1d","mR1e")
modelsR2 <- c(        "m1R2", "m2R2", "m3R2", "m4R2", "m5R2", "m6R2", "m7R2")
modelsR3 <- c(                "m2R3", "m3R3", "m4R3", "m5R3", "m6R3", "m7R3")
modelsR4 <- c(                        "m3R4", "m4R4", "m5R4", "m6R4", "m7R4")
modelList1<- c(modelsFE, modelsR1, modelsR2, modelsR3, modelsR4, otherFE, otherR1)
modelList2<- c( "m0F", "m0R1",
"m1F", "m1R1", "m1R2",
"m2F", "m2R1", "m2R2",
"m3F", "m3R1", "m3R2", "m3R3", "m3R4",
"m4F", "m4R1", "m4R2", "m4R3", "m4R4",
"m5F", "m5R1", "m5R2", "m5R3", "m5R4",
"m6F", "m6R1", "m6R2", "m6R3", "m6R4",
"m7F", "m7R1", "m7R2", "m7R3", "m7R4",
"mFa", "mR1a", "mFb", "mR1b","mFc", "mR1c","mFd", "mR1d", "mFe", "mR1e"
)
### graph of comparative fit
ds<-dsInfo
head(ds)
ds<- reshape2::melt(ds,id.vars=c('Coefficient'))
ds<-plyr::rename(ds, replace = c( variable = "model"))
head(ds,10)
ds<- ds %>%
dplyr::filter(Coefficient %in% c( "BIC","AIC","deviance"))
head(ds,160)
ds$Coefficient<- factor(c("BIC","AIC","deviance"))
# ds$Coefficient<- factor(c("deviance","BIC","AIC"))
# ds$Coefficient<- factor(c("BIC","deviance","AIC"))
# ds$Coefficient<- factor(c("deviance","AIC","BIC"))
# ds$Coefficient<- factor(c("AIC","deviance","BIC"))
# ds$Coefficient<- factor(c("AIC","BIC","deviance"))
head(ds,9)
# possible pallets
colorFit <- c("BIC"="#8da0cb", "AIC"="#fc8d62", "deviance"="#66c2a5")
# colorFit <- c("BIC"="grey", "AIC"="tomato", "deviance"="green")
# colorFit <- c("BIC"="#bebada", "AIC"="#8dd3c7", "deviance"="#ffffb3") #b2df8a
# colorFit <- c("BIC"="#8da0cb", "AIC"="#d95f02", "deviance"="#b2df8a")
p <- ggplot2::ggplot(ds, aes(x= reorder(model, value), y=value, fill= Coefficient, group=model))
p <- p + geom_bar( stat="identity", position="dodge", alpha=.5)
p<- p + scale_fill_manual(values=colorFit)
p<- p + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p<- p + scale_x_discrete(limits=modelList2)
# p<- p + scale_y_continuous( limits = c(80000, 110000))
p
###################
# Read in different REDS files and join them all together
pathDataDirectory <- file.path("./Models/LCM/models/datasets")
# filenamePattern <- ".+\\.rds" #All RDS files
filenamePattern <- "m.{1,}Info\\.rds" #All RDS files
retrievedFilenames <- list.files(path=pathDataDirectory, pattern=filenamePattern)
filePaths <- file.path(pathDataDirectory, retrievedFilenames)
dsInfo <- readRDS(filePaths[1])
for( i in 1:length(filePaths) ) {
# To debug, change the '6' to some number to isolate the problem: for( i in 2:6 ) {
# message("About to read", filePaths[i], "\\")
dsInfoSingle <- readRDS(filePaths[i])
dsInfo <- plyr::join(x=dsInfo, y=dsInfoSingle, by="Coefficient", type="left", match="all")
rm(dsInfoSingle)
}
modelsFE <- c(  "m0F", "m1F", "m2F", "m3F", "m4F", "m5F", "m6F", "m7F")
otherFE<- c("mFa", "mFb", "mFc", "mFd","mFe")
modelsR1 <- c("m0R1", "m1R1", "m2R1", "m3R1", "m4R1", "m5R1", "m6R1", "m7R1")
otherR1<- c ("mR1a", "mR1b", "mR1c", "mR1d","mR1e")
modelsR2 <- c(        "m1R2", "m2R2", "m3R2", "m4R2", "m5R2", "m6R2", "m7R2")
modelsR3 <- c(                "m2R3", "m3R3", "m4R3", "m5R3", "m6R3", "m7R3")
modelsR4 <- c(                        "m3R4", "m4R4", "m5R4", "m6R4", "m7R4")
modelList1<- c(modelsFE, modelsR1, modelsR2, modelsR3, modelsR4, otherFE, otherR1)
modelList2<- c( "m0F", "m0R1",
"m1F", "m1R1", "m1R2",
"m2F", "m2R1", "m2R2",
"m3F", "m3R1", "m3R2", "m3R3", "m3R4",
"m4F", "m4R1", "m4R2", "m4R3", "m4R4",
"m5F", "m5R1", "m5R2", "m5R3", "m5R4",
"m6F", "m6R1", "m6R2", "m6R3", "m6R4",
"m7F", "m7R1", "m7R2", "m7R3", "m7R4",
"mFa", "mR1a", "mFb", "mR1b","mFc", "mR1c","mFd", "mR1d", "mFe", "mR1e"
)
### graph of comparative fit
ds<-dsInfo
head(ds)
ds<- reshape2::melt(ds,id.vars=c('Coefficient'))
ds<-plyr::rename(ds, replace = c( variable = "model"))
head(ds,10)
ds<- ds %>%
dplyr::filter(Coefficient %in% c( "BIC","AIC","deviance"))
head(ds,160)
ds$Coefficient<- factor(c("BIC","AIC","deviance"))
# ds$Coefficient<- factor(c("deviance","BIC","AIC"))
# ds$Coefficient<- factor(c("BIC","deviance","AIC"))
# ds$Coefficient<- factor(c("deviance","AIC","BIC"))
# ds$Coefficient<- factor(c("AIC","deviance","BIC"))
# ds$Coefficient<- factor(c("AIC","BIC","deviance"))
head(ds,9)
# possible pallets
# colorFit <- c("BIC"="#8da0cb", "AIC"="#fc8d62", "deviance"="#66c2a5")
# colorFit <- c("BIC"="grey", "AIC"="tomato", "deviance"="green")
colorFit <- c("BIC"="#bebada", "AIC"="#8dd3c7", "deviance"="#ffffb3")
# colorFit <- c("BIC"="#8da0cb", "AIC"="#d95f02", "deviance"="#b2df8a")
p <- ggplot2::ggplot(ds, aes(x= reorder(model, value), y=value, fill= Coefficient, group=model))
p <- p + geom_bar( stat="identity", position="dodge", alpha=.5)
p<- p + scale_fill_manual(values=colorFit)
p<- p + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p<- p + scale_x_discrete(limits=modelList2)
# p<- p + scale_y_continuous( limits = c(80000, 110000))
p
###################
# Read in different REDS files and join them all together
pathDataDirectory <- file.path("./Models/LCM/models/datasets")
# filenamePattern <- ".+\\.rds" #All RDS files
filenamePattern <- "m.{1,}Info\\.rds" #All RDS files
retrievedFilenames <- list.files(path=pathDataDirectory, pattern=filenamePattern)
filePaths <- file.path(pathDataDirectory, retrievedFilenames)
dsInfo <- readRDS(filePaths[1])
for( i in 1:length(filePaths) ) {
# To debug, change the '6' to some number to isolate the problem: for( i in 2:6 ) {
# message("About to read", filePaths[i], "\\")
dsInfoSingle <- readRDS(filePaths[i])
dsInfo <- plyr::join(x=dsInfo, y=dsInfoSingle, by="Coefficient", type="left", match="all")
rm(dsInfoSingle)
}
modelsFE <- c(  "m0F", "m1F", "m2F", "m3F", "m4F", "m5F", "m6F", "m7F")
otherFE<- c("mFa", "mFb", "mFc", "mFd","mFe")
modelsR1 <- c("m0R1", "m1R1", "m2R1", "m3R1", "m4R1", "m5R1", "m6R1", "m7R1")
otherR1<- c ("mR1a", "mR1b", "mR1c", "mR1d","mR1e")
modelsR2 <- c(        "m1R2", "m2R2", "m3R2", "m4R2", "m5R2", "m6R2", "m7R2")
modelsR3 <- c(                "m2R3", "m3R3", "m4R3", "m5R3", "m6R3", "m7R3")
modelsR4 <- c(                        "m3R4", "m4R4", "m5R4", "m6R4", "m7R4")
modelList1<- c(modelsFE, modelsR1, modelsR2, modelsR3, modelsR4, otherFE, otherR1)
modelList2<- c( "m0F", "m0R1",
"m1F", "m1R1", "m1R2",
"m2F", "m2R1", "m2R2",
"m3F", "m3R1", "m3R2", "m3R3", "m3R4",
"m4F", "m4R1", "m4R2", "m4R3", "m4R4",
"m5F", "m5R1", "m5R2", "m5R3", "m5R4",
"m6F", "m6R1", "m6R2", "m6R3", "m6R4",
"m7F", "m7R1", "m7R2", "m7R3", "m7R4",
"mFa", "mR1a", "mFb", "mR1b","mFc", "mR1c","mFd", "mR1d", "mFe", "mR1e"
)
### graph of comparative fit
ds<-dsInfo
head(ds)
ds<- reshape2::melt(ds,id.vars=c('Coefficient'))
ds<-plyr::rename(ds, replace = c( variable = "model"))
head(ds,10)
ds<- ds %>%
dplyr::filter(Coefficient %in% c( "BIC","AIC","deviance"))
head(ds,160)
ds$Coefficient<- factor(c("BIC","AIC","deviance"))
# ds$Coefficient<- factor(c("deviance","BIC","AIC"))
# ds$Coefficient<- factor(c("BIC","deviance","AIC"))
# ds$Coefficient<- factor(c("deviance","AIC","BIC"))
# ds$Coefficient<- factor(c("AIC","deviance","BIC"))
# ds$Coefficient<- factor(c("AIC","BIC","deviance"))
head(ds,9)
# possible pallets
# colorFit <- c("BIC"="#8da0cb", "AIC"="#fc8d62", "deviance"="#66c2a5")
colorFit <- c("BIC"="blue", "AIC"="tomato", "deviance"="yellow")
# colorFit <- c("BIC"="#bebada", "AIC"="#8dd3c7", "deviance"="#ffffb3")
# colorFit <- c("BIC"="#8da0cb", "AIC"="#d95f02", "deviance"="#b2df8a")
p <- ggplot2::ggplot(ds, aes(x= reorder(model, value), y=value, fill= Coefficient, group=model))
p <- p + geom_bar( stat="identity", position="dodge", alpha=.5)
p<- p + scale_fill_manual(values=colorFit)
p<- p + theme(axis.text.x = element_text(angle = 45, hjust = 1))
p<- p + scale_x_discrete(limits=modelList2)
# p<- p + scale_y_continuous( limits = c(80000, 110000))
p
# Traditional reading in the files
getModels<- c("m7R2")
for(i in getModels){
modelName<- i
pathdsmInfo <- file.path("./Models/LCM/models/datasets",paste0(i,"_mInfo.rds"))
pathdsFERE  <- file.path("./Models/LCM/models/datasets",paste0(i,"_FERE.rds"))
pathdsp  <- file.path("./Models/LCM/models/datasets",paste0(i,"_dsp.rds"))
mInfoTemp<- readRDS(pathdsmInfo)
FERETemp<- readRDS(pathdsFERE)
dspTemp<- readRDS(pathdsp)
assign(paste0(i,"_mInfo"),mInfoTemp)
assign(paste0(i,"_FERE"),FERETemp)
assign(paste0(i,"_dsp"),dspTemp)
rm(list = c("mInfoTemp", "FERETemp", "dspTemp"))
}
bgColour<-gray(.95)   # background color
indLineSz<-.08        # individual line size
indLineAl<-.06        # individual line alpha
require(ggplot2)
ds<- m7R2_dsp %>% dplyr::filter(id %in% c(1:500))
head(ds)
p<- ggplot2::ggplot(ds, aes(x=timec, y=attend, group=id))
# geoms
p<- p + geom_line(aes(x=timec,y=yHat),colour="red",alpha=indLineAl,size=indLineSz)
p<- p + geom_line(aes(y=yFE), fill=NA)
# p<- p + geom_line(aes(y=gamma00),fill=NA, color="black",size=2)
# p<- p + geom_line(aes(y=gamma01),fill=NA, color="red", size=2)
# p<- p + geom_line(aes(y=gamma02),fill=NA, color="green", size=2)
# p<- p + geom_line(aes(y=gamma03),fill=NA, color="blue", size=2)
# p<- p + geom_line(aes(y=gamma10),fill=NA, color="black", size=1, linetype="dashed")
# p<- p + geom_line(aes(y=gamma11),fill=NA, color="red", size=1, linetype="dashed")
# p<- p + geom_line(aes(y=gamma12),fill=NA, color="green", size=1, linetype="dashed")
# p<- p + geom_line(aes(y=gamma13),fill=NA, color="blue",  size=1, linetype="dashed")
# scales
p<- p + scale_x_continuous(breaks=seq(0,10, 1),limits=c(0,10))
p<- p + scale_y_continuous(breaks=seq(0, 8, 1),limits=c(.5,8.5))
# themes, guide, and annotations
p <- p + ggplot2::theme_bw()
p <- p + ggplot2::theme_bw(base_size=baseSize)
p <- p + ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = 12))
p <- p + ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40"))
p <- p + ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40"))
p <- p + ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80"))
p <- p + ggplot2::theme(axis.ticks.length = grid::unit(0, "cm"))
p <- p + theme(text = element_text(size =25), panel.background=element_rect(fill=bgColour,colour=NA))
p<- p + ggplot2::theme(legend.position=c(.95,.90),legend.direction="vertical")
p<- p + ggplot2::theme(legend.background = element_rect(fill=NA))
p<- p + ggplot2::theme(legend.text = element_text(size = 15),legend.title.align =(-3.3))
p<- p + ggplot2::theme(panel.grid = element_line(linetype = 1,size=rel(3)))
p <- p + labs(title="How often have you attended a worship service (2000)?",
x="Church attendance",
y="Count")
p
# Traditional reading in the files
getModels<- c("m7R2")
for(i in getModels){
modelName<- i
pathdsmInfo <- file.path("./Models/LCM/models/datasets",paste0(i,"_mInfo.rds"))
pathdsFERE  <- file.path("./Models/LCM/models/datasets",paste0(i,"_FERE.rds"))
pathdsp  <- file.path("./Models/LCM/models/datasets",paste0(i,"_dsp.rds"))
mInfoTemp<- readRDS(pathdsmInfo)
FERETemp<- readRDS(pathdsFERE)
dspTemp<- readRDS(pathdsp)
assign(paste0(i,"_mInfo"),mInfoTemp)
assign(paste0(i,"_FERE"),FERETemp)
assign(paste0(i,"_dsp"),dspTemp)
rm(list = c("mInfoTemp", "FERETemp", "dspTemp"))
}
###############################################
### graph of prediction
bgColour<-gray(.95)   # background color
indLineSz<-.08        # individual line size
indLineAl<-.06        # individual line alpha
require(ggplot2)
ds<- m7R2_dsp %>% dplyr::filter(id %in% c(1:500))
head(ds)
p<- ggplot2::ggplot(ds, aes(x=timec, y=attend, group=id))
# geoms
p<- p + geom_line(aes(x=timec,y=yHat),colour="red",alpha=indLineAl,size=indLineSz)
p<- p + geom_line(aes(y=yFE), fill=NA, size=1.5, color="blue")
# p<- p + geom_line(aes(y=gamma00),fill=NA, color="black",size=2)
# p<- p + geom_line(aes(y=gamma01),fill=NA, color="red", size=2)
# p<- p + geom_line(aes(y=gamma02),fill=NA, color="green", size=2)
# p<- p + geom_line(aes(y=gamma03),fill=NA, color="blue", size=2)
# p<- p + geom_line(aes(y=gamma10),fill=NA, color="black", size=1, linetype="dashed")
# p<- p + geom_line(aes(y=gamma11),fill=NA, color="red", size=1, linetype="dashed")
# p<- p + geom_line(aes(y=gamma12),fill=NA, color="green", size=1, linetype="dashed")
# p<- p + geom_line(aes(y=gamma13),fill=NA, color="blue",  size=1, linetype="dashed")
# scales
p<- p + scale_x_continuous(breaks=seq(0,10, 1),limits=c(0,10))
p<- p + scale_y_continuous(breaks=seq(0, 8, 1),limits=c(.5,8.5))
# themes, guide, and annotations
p <- p + ggplot2::theme_bw()
p <- p + ggplot2::theme_bw(base_size=baseSize)
p <- p + ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = 12))
p <- p + ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40"))
p <- p + ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40"))
p <- p + ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80"))
p <- p + ggplot2::theme(axis.ticks.length = grid::unit(0, "cm"))
p <- p + theme(text = element_text(size =25), panel.background=element_rect(fill=bgColour,colour=NA))
p<- p + ggplot2::theme(legend.position=c(.95,.90),legend.direction="vertical")
p<- p + ggplot2::theme(legend.background = element_rect(fill=NA))
p<- p + ggplot2::theme(legend.text = element_text(size = 15),legend.title.align =(-3.3))
p<- p + ggplot2::theme(panel.grid = element_line(linetype = 1,size=rel(3)))
p <- p + labs(title="How often have you attended a worship service (2000)?",
x="Church attendance",
y="Count")
p
# Traditional reading in the files
getModels<- c("m7R2")
for(i in getModels){
modelName<- i
pathdsmInfo <- file.path("./Models/LCM/models/datasets",paste0(i,"_mInfo.rds"))
pathdsFERE  <- file.path("./Models/LCM/models/datasets",paste0(i,"_FERE.rds"))
pathdsp  <- file.path("./Models/LCM/models/datasets",paste0(i,"_dsp.rds"))
mInfoTemp<- readRDS(pathdsmInfo)
FERETemp<- readRDS(pathdsFERE)
dspTemp<- readRDS(pathdsp)
assign(paste0(i,"_mInfo"),mInfoTemp)
assign(paste0(i,"_FERE"),FERETemp)
assign(paste0(i,"_dsp"),dspTemp)
rm(list = c("mInfoTemp", "FERETemp", "dspTemp"))
}
###############################################
### graph of prediction
bgColour<-gray(.95)   # background color
indLineSz<-.08        # individual line size
indLineAl<-.06        # individual line alpha
require(ggplot2)
ds<- m7R2_dsp %>% dplyr::filter(id %in% c(1:1000))
head(ds)
p<- ggplot2::ggplot(ds, aes(x=timec, y=attend, group=id))
# geoms
p<- p + geom_line(aes(x=timec,y=yHat),colour="red",alpha=indLineAl,size=indLineSz)
p<- p + geom_line(aes(y=yFE), fill=NA, size=1.5, color="blue")
# p<- p + geom_line(aes(y=gamma00),fill=NA, color="black",size=2)
# p<- p + geom_line(aes(y=gamma01),fill=NA, color="red", size=2)
# p<- p + geom_line(aes(y=gamma02),fill=NA, color="green", size=2)
# p<- p + geom_line(aes(y=gamma03),fill=NA, color="blue", size=2)
# p<- p + geom_line(aes(y=gamma10),fill=NA, color="black", size=1, linetype="dashed")
# p<- p + geom_line(aes(y=gamma11),fill=NA, color="red", size=1, linetype="dashed")
# p<- p + geom_line(aes(y=gamma12),fill=NA, color="green", size=1, linetype="dashed")
# p<- p + geom_line(aes(y=gamma13),fill=NA, color="blue",  size=1, linetype="dashed")
# scales
p<- p + scale_x_continuous(breaks=seq(0,10, 1),limits=c(0,10))
p<- p + scale_y_continuous(breaks=seq(0, 8, 1),limits=c(.5,8.5))
# themes, guide, and annotations
p <- p + ggplot2::theme_bw()
p <- p + ggplot2::theme_bw(base_size=baseSize)
p <- p + ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = 12))
p <- p + ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40"))
p <- p + ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40"))
p <- p + ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80"))
p <- p + ggplot2::theme(axis.ticks.length = grid::unit(0, "cm"))
p <- p + theme(text = element_text(size =25), panel.background=element_rect(fill=bgColour,colour=NA))
p<- p + ggplot2::theme(legend.position=c(.95,.90),legend.direction="vertical")
p<- p + ggplot2::theme(legend.background = element_rect(fill=NA))
p<- p + ggplot2::theme(legend.text = element_text(size = 15),legend.title.align =(-3.3))
p<- p + ggplot2::theme(panel.grid = element_line(linetype = 1,size=rel(3)))
p <- p + labs(title="How often have you attended a worship service (2000)?",
x="Church attendance",
y="Count")
p
rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.
# Traditional reading in the files
getModels<- c("m7R2")
for(i in getModels){
modelName<- i
pathdsmInfo <- file.path("./Models/LCM/models/datasets",paste0(i,"_mInfo.rds"))
pathdsFERE  <- file.path("./Models/LCM/models/datasets",paste0(i,"_FERE.rds"))
pathdsp  <- file.path("./Models/LCM/models/datasets",paste0(i,"_dsp.rds"))
mInfoTemp<- readRDS(pathdsmInfo)
FERETemp<- readRDS(pathdsFERE)
dspTemp<- readRDS(pathdsp)
assign(paste0(i,"_mInfo"),mInfoTemp)
assign(paste0(i,"_FERE"),FERETemp)
assign(paste0(i,"_dsp"),dspTemp)
rm(list = c("mInfoTemp", "FERETemp", "dspTemp"))
}
require(ggplot2)
require(dplyr)
require(reshape2)
emptyTheme <- ggplot2::theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank()) +
theme(panel.grid = element_blank()) +
theme(panel.border = element_blank()) +
theme(axis.ticks.length = grid::unit(0, "cm"))
# run sequenceLCM.R if don't get some objcets
# i<- "m6R3"
i<- "m7R2"
pathdsFERE  <- file.path("./Models/LCM/models/datasets",paste0(i,"_FERE.rds"))
m6R3_FERE<- readRDS(pathdsFERE)
dsWide<- m6R3_FERE
dsWide<- dsWide %>% dplyr::select( Coefficient, Estimate, Std.Error, t.value, sdRE,intVarRE, timecVarRE, timec2VarRE, sigma )
head(dsWide,10)
# I will enforce this order, it's important
target <- c("(Intercept)", "timec", "timec2", "timec3", "cohort",
"timec:cohort", "timec2:cohort", "timec3:cohort")
dsWide<-dsWide[match(target, dsWide$Coefficient),]
dsWide
ds <- melt(dsWide, id.vars=("Coefficient"), value.name="value")
head(ds, 10)
head(ds,20)
roundingDigits<- 2
# ds <- ds %>% mutate(label= as.character(round(value,roundingDigits))) #I don't think there's a need to use mutate here, but some people do.
ds$label <- format(x=round(ds$value,roundingDigits), trim=FALSE)
ds$label[is.na(ds$value)] <- ""
# ds$label
lt<- length(target) # legnth of target
a<- rep(1,8)
b<- c(a, a*2, a*3, a*4, a*5, a*6, a*7, a*8)
ds <- ds %>% mutate(row= rep(c(1:lt),lt), col=b)
ds
ggplot(ds, aes(x=col, xmin=col-.5, xmax=col+.5, y=-row, ymin=-row-.5, ymax=-row+.5, label=label)) +
geom_rect(aes(fill=value)) +
geom_text(na.rm=T, color="black", hjust=.5, vjust=.5, size=5, family="mono") +
emptyTheme +
theme(legend.position="none")
ggsave(filename="./Models/LCM/graphs/equationTiles.png", plot=last_plot())
ds <- melt(dsWide, id.vars=("Coefficient"), value.name="value")
head(ds, 10)
head(ds,20)
roundingDigits<- 2
# ds <- ds %>% mutate(label= as.character(round(value,roundingDigits))) #I don't think there's a need to use mutate here, but some people do.
ds$label <- format(x=round(ds$value,roundingDigits), trim=FALSE)
ds$label[is.na(ds$value)] <- ""
# ds$label
lt<- length(target) # legnth of target
a<- rep(1,8)
b<- c(a, a*2, a*3, a*4, a*5, a*6, a*7, a*8)
ds <- ds %>% mutate(row= rep(c(1:lt),lt), col=b)
ds
ggplot(ds, aes(x=col, xmin=col-.5, xmax=col+.5, y=-row, ymin=-row-.5, ymax=-row+.5, label=label)) +
geom_rect(aes(fill=value)) +
geom_text(na.rm=T, color="black", hjust=.5, vjust=.5, size=5, family="mono") +
emptyTheme +
theme(legend.position="none")
ggsave(filename="./Models/LCM/graphs/equationTiles.png", plot=last_plot())
rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.
require(ggplot2)
require(dplyr)
require(reshape2)
emptyTheme <- ggplot2::theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank()) +
theme(panel.grid = element_blank()) +
theme(panel.border = element_blank()) +
theme(axis.ticks.length = grid::unit(0, "cm"))
# run sequenceLCM.R if don't get some objcets
i<- "m6R3"
pathdsFERE  <- file.path("./Models/LCM/models/datasets",paste0(i,"_FERE.rds"))
m6R3_FERE<- readRDS(pathdsFERE)
dsWide<- m6R3_FERE
dsWide<- dsWide %>% dplyr::select( Coefficient, Estimate, Std.Error, t.value, sdRE,intVarRE, timecVarRE, timec2VarRE, sigma )
head(dsWide,10)
# I will enforce this order, it's important
target <- c("(Intercept)", "timec", "timec2", "timec3", "cohort",
"timec:cohort", "timec2:cohort", "timec3:cohort")
dsWide<-dsWide[match(target, dsWide$Coefficient),]
dsWide
ds <- melt(dsWide, id.vars=("Coefficient"), value.name="value")
head(ds, 10)
head(ds,20)
roundingDigits<- 2
# ds <- ds %>% mutate(label= as.character(round(value,roundingDigits))) #I don't think there's a need to use mutate here, but some people do.
ds$label <- format(x=round(ds$value,roundingDigits), trim=FALSE)
ds$label[is.na(ds$value)] <- ""
# ds$label
lt<- length(target) # legnth of target
a<- rep(1,8)
b<- c(a, a*2, a*3, a*4, a*5, a*6, a*7, a*8)
ds <- ds %>% mutate(row= rep(c(1:lt),lt), col=b)
ds
ggplot(ds, aes(x=col, xmin=col-.5, xmax=col+.5, y=-row, ymin=-row-.5, ymax=-row+.5, label=label)) +
geom_rect(aes(fill=value)) +
geom_text(na.rm=T, color="black", hjust=.5, vjust=.5, size=5, family="mono") +
emptyTheme +
theme(legend.position="none")
ggsave(filename="./Models/LCM/graphs/equationTiles.png", plot=last_plot())
###############################################################
# # playground down there
#
# ds$Positive <- ifelse(ds$value >= 0, "Positive", "Negative") #Or see Recipe 10.8
# ds$LoadingAbs <- abs(ds$value) # Long form
# ds$LoadingPretty <- round(abs(ds$value), roundingDigits) # Long form
# # colors <- c("FALSE"="darksalmon" ,"TRUE"="lightskyblue") # The colors for negative and positve values of factor loadings for ggplot
# colorsFill <- c("Positive"="#A6CEE3" ,"Negative"="#B2DF8A") # The colors for negative and positve values of factor loadings for ggplot
# colorsColor <- c("Positive"="#00CEE3" ,"Negative"="#00DF8A") # The colors for negative and positve values of factor loadings for ggplot
#
# p <- ggplot(ds, aes(x=variable, y=LoadingAbs, fill=Positive, color=Positive, label=LoadingPretty)) +
# p <- p + geom_bar(stat="identity") +
# p <- p +   geom_text(y=0, vjust=-.1) +
# p <- p +  scale_color_manual(values=colorsColor, guide="none") +
# p <- p +   scale_fill_manual(values=colorsFill) +
#   #   scale_fill_discrete(h=c(0,360)+15, c=100, l=65, h.start=0, direction=1, na.value="grey50") + #http://docs.ggplot2.org/0.9.3/scale_hue.html
# # p <- p +   scale_y_continuous(limits=c(0,1.2), breaks=c(.5, 1), expand=c(0,0)) +
# p <- p +   facet_grid(VariablePretty ~ .) +
# p <- p + labs(title=title, x="FFF", y="Loadings (Absolute)", fill=NULL) +
# p <- p + theme_bw() +
# p <- p + theme(panel.grid.minor=element_blank()) +
# #   theme(axis.label=element_text(color="gray30")) +
# p <- p + theme(axis.text.y=element_text(color="gray50")) +
# p <- p + theme(strip.text.y=element_text(angle=0, size=stripSize))
#
# {
#     if( k < p ) {
#       p <- p + theme(legendmelt.position=c(1, 0), legend.justification=c(1, 0))
#       p <- p + theme(legend.background=element_rect(fill="gray70"))
#     }
#     else {
#       p <- p + theme(legend.position="left")
#     }
#   }
# print(p)
