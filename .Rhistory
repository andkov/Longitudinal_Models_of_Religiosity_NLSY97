pullMainEffect <- function (timeName){
possibleNAEffect <- FE[timeName]
result <- ifelse( is.na(rep(possibleNAEffect,nrow(dsp))), 0,
possibleNAEffect*dsp[,timeName])
return(result)
}
pullInteractionEffect <- function (timeName){
possibleNAEffect <- FE[paste0(timeName,":cohort")]
result <- ifelse( is.na(rep(possibleNAEffect,nrow(dsp))), 0,
possibleNAEffect*dsp[,timeName])
return(result)
}
FE<- summary(model)$coefficients
# estimates of the fixed effects
#  gamma sub(0*) - pure time effects
# Intercept - gamma sub(00)
dsp$gamma00 <- FE["(Intercept)"]
# Linear trend of time - gamma sub(01)
dsp$gamma01 <- pullMainEffect("timec")
# Quadratic trend of time - gamma sub(02)
dsp$gamma02 <- pullMainEffect("timec2")
# Cubic trend of time - gamma sub(03)
dsp$gamma03 <- pullMainEffect("timec3")
#  gamma subs(1*) - effect of cohort(w1) on:
#  Intercept - gamma sub(01)
dsp$gamma10 <- FE["cohort"]
# Linear trend of time - gamma sub(11)
dsp$gamma11 <- pullInteractionEffect("timec")
# Quadratic trend of time - gamma sub(12)
dsp$gamma12 <- pullInteractionEffect("timec2")
# Cubic trend of time - gamma sub(13)
dsp$gamma13 <- pullInteractionEffect("timec3")
# Compute the mean trajectory, without the individual variability
# gamma sub(K*) - add more predictors here if expanding sequence
f.effects<- c("gamma00","gamma01","gamma02","gamma03",
"gamma10","gamma11","gamma12","gamma13")
dsp$yFE <- rowSums (dsp[,colnames(dsp) %in% f.effects],na.rm=TRUE)
head(dsp)
pullRandomEffect <- function (timeName,tauName){
variableMissing <- !(tauName %in% colnames(dsp))
if( variableMissing ) {
return( rep(0, times=nrow(dsp)) )
}
else {
possibleNAEffect <- dsp[,tauName]
result <- ifelse( is.na(possibleNAEffect), 0,
possibleNAEffect*dsp[,timeName])
return(result)
}
}
# pullRandomEffect(timeName="timec3", tauName="tau33sd")
# and produce predictions using the time effects
# note that tau00sd stays here just to create the column
dsp$tau00sd <- 0
dsp$tau11sd <- pullRandomEffect(timeName="timec", tauName="tau11sd")
dsp$tau22sd <- pullRandomEffect(timeName="timec2", tauName="tau22sd")
dsp$tau33sd <- pullRandomEffect(timeName="timec3", tauName="tau33sd")
} # close else
#TODO: fix this hack
missingTimeInDsp <- !("timec" %in% colnames(dsp))
if( missingTimeInDsp ) {
#     dsTimeOnly <- ds[]
#TODO: the 'timec' variable needs to be merged into the dsp dataset, using the ds dataset.
#  However, there's not a good set of variables to match on.
dsp$timec <- NA_real_
}
head(dsp)
###########################################################################################
## @knitr saveModelResults
modelName
pathdsmInfo <- file.path("./Models/LCM/models/datasets",paste0(modelName,"_mInfo.rds"))
pathdsFERE  <- file.path("./Models/LCM/models/datasets",paste0(modelName,"_FERE.rds"))
pathdsp  <- file.path("./Models/LCM/models/datasets",paste0(modelName,"_dsp.rds"))
saveRDS(object=dsmInfo, file=pathdsmInfo, compress="xz")
saveRDS(object=dsFERE, file=pathdsFERE, compress="xz")
saveRDS(object=dsp, file=pathdsp, compress="xz")
} # end of the for loop
cat("\014")
#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!
rm(list=ls(all=TRUE))  #Clear the variables from previous runs.
############################
## @knitr LoadPackages
require(RODBC)
require(grid)
require(lattice)
require(dplyr)
require(ggplot2)
require(gridExtra)
require(lme4)
require(reshape2)
############################
## @knitr DeclareGlobals
# load common aesthetics definitions used in the reports
source("./Models/Descriptives/AesDefine.R")
# read back the definitions
# aesDefs
############################
## @knitr LoadData
# dsL<-readRDS("./Data/Derived/dsL.rds")
# source("./Models/LCM/LCModels.R")
############################
## @knitr defineData
# numID<- 9022 # highest id value (max = 9022)
# ### Define the data that will populate the model
# ds<- dsL %>%  # chose conditions to apply in creating dataset for modeling
#   dplyr::filter(id < numID) %.% # 1:9022
#   dplyr::filter(year %in% c(2000:2011)) %.% # 1997:2011
#   dplyr::filter(sample %in% c(1)) %.% # 0-Oversample; 1-Cross-Sectional
#   dplyr::filter(race %in% c(4)) %.% # 1-Black; 2-Hispanis; 3-Mixed; 4-White
#   dplyr::filter(byear %in% c(1980:1984)) %.% # birth year 1980:1984
#   dplyr::filter(ave(!is.na(attend), id, FUN = all)) %.% # only complete trajectories
#   dplyr::mutate( # compute new variables
#     age= year-byear, # definition of age to be used in the model
# #     timec=year-2000, # metric of time is rounds of NSLY97 in years, centered at 2000
# #     timec2= timec^2,
# #     timec3= timec^3,
#     timec= age-16, # metric of time is bilogical age in years, centered at 16
#     timec2= timec^2,
#     timec3= timec^3,#
#     cohort=byear-1980) %.% # age difference, years younger (unit - 1 cohort away)
#   dplyr::select( # assemble the dataset for modeling
#     id, sample, race, byear,cohort, # Time Invariant variables
#     year,
#     age, timec,timec2,timec3, attend)  # Time Variant variables
# head(ds)
# table(ds$byear) # the year of birth  - metric: YEAR
# table(ds$age) # years past 16 -  metric: AGE
# table(ds$year, ds$age) # YEAR by  AGE
# length(unique(ds$id)) # total No. of respondents in dataset
# sum(!is.na(ds$attend)) # valid datapoints
# sum(is.na(ds$attend)) # NA in the dataset
# length(unique(ds$timec))
## FOR TESTING ###
# flmer<- as.formula(call_m5R1)
# model <-lmer (flmer, data = ds, REML=FALSE,
#               control=lmerControl(optCtrl=list(maxfun=20000)))
# modelR<-model
#
# fnlme<- as.formula(call_m5F)
# model<- nlme::gls(f, data=ds,method = "ML")
# modelF<-model
###################
# # Traditional reading in the files
# getModels<- c("m7R3")
# getAll<- modelList
#
#
# for(i in allModels){
#   modelName<- i
#   pathdsmInfo <- file.path("./Models/LCM/models/datasets",paste0(i,"_mInfo.rds"))
#   pathdsFERE  <- file.path("./Models/LCM/models/datasets",paste0(i,"_FERE.rds"))
#   pathdsp  <- file.path("./Models/LCM/models/datasets",paste0(i,"_dsp.rds"))
#   mInfoTemp<- readRDS(pathdsmInfo)
#   FERETemp<- readRDS(pathdsFERE)
#   dspTemp<- readRDS(pathdsp)
#
#   assign(paste0(i,"_mInfo"),mInfoTemp)
#   assign(paste0(i,"_FERE"),FERETemp)
#   assign(paste0(i,"_dsp"),dspTemp)
#   rm(list = c("mInfoTemp", "FERETemp", "dspTemp"))
# }
###################
# Read in different REDS files and join them all together
pathDataDirectory <- file.path("./Models/LCM/models/datasets")
# filenamePattern <- ".+\\.rds" #All RDS files
filenamePattern <- "m.{1,}Info\\.rds" #All RDS files
retrievedFilenames <- list.files(path=pathDataDirectory, pattern=filenamePattern)
filePaths <- file.path(pathDataDirectory, retrievedFilenames)
dsInfo <- readRDS(filePaths[1])
for( i in 1:length(filePaths) ) {
# To debug, change the '6' to some number to isolate the problem: for( i in 2:6 ) {
# message("About to read", filePaths[i], "\\")
dsInfoSingle <- readRDS(filePaths[i])
dsInfo <- plyr::join(x=dsInfo, y=dsInfoSingle, by="Coefficient", type="left", match="all")
rm(dsInfoSingle)
}
###################
# Read in different REDS files
pathDataDirectory <- file.path("./Models/LCM/models/datasets")
# filenamePattern <- ".+\\.rds" #All RDS files
filenamePattern <- "m.{1,}FERE\\.rds" #All RDS files
retrievedFilenames <- list.files(path=pathDataDirectory, pattern=filenamePattern)
# dsFERE <- readRDS(filePaths[1])
# requireFieldsEvenIfNA <- c("sdRE", "timec", "intVarRE", "timecVarRE", "timec2VarRE", "timec3VarRE")
lst_ds <- NULL
for( i in seq_along(retrievedFilenames) ) {
filePath <- filePaths <- file.path(pathDataDirectory, retrievedFilenames[i])
dsFERESingle <- readRDS(filePath)
dsFERESingle <- plyr::rename(dsFERESingle, replace=c("Value"="Estimate"), warn_missing=FALSE)
#TODO: convert this into a loop
if( !("sdRE" %in% colnames(dsFERESingle)) ) dsFERESingle$sdRE <- NA
if( !("timec" %in% colnames(dsFERESingle)) ) dsFERESingle$timec <- NA
if( !("intVarRE" %in% colnames(dsFERESingle)) ) dsFERESingle$intVarRE <- NA
if( !("timecVarRE" %in% colnames(dsFERESingle)) ) dsFERESingle$timecVarRE <- NA
if( !("timec2VarRE" %in% colnames(dsFERESingle)) ) dsFERESingle$timec2VarRE <- NA
if( !("timec3VarRE" %in% colnames(dsFERESingle)) ) dsFERESingle$timec3VarRE <- NA
#   for( requiredField in requireFieldsEvenIfNA ) {
#     if( !(requireField %in% colnames(dsFERESingle)) )
#       dsFERESingle[[requireField]] <- NA
#   }
lst_ds[[i]] <- dsFERESingle
rm(dsFERESingle)
}
#names(lst_ds) <- gsub(pattern="(.+)\\.rds", replacement="\\1", x=retrievedFilenames)
names(lst_ds) <- gsub(pattern="(.+)\\_FERE.rds", replacement="\\1", x=retrievedFilenames)
saveRDS(lst_ds, file="./Models/LCM/models/datasets/ListOfModelOutcomes.rds", compress="xz")
# lst_ds["m4R1_FERE"]
# modelNames
require(ggplot2)
require(dplyr)
require(reshape2)
BuildBar <- function( modelName = NA ) {
# Read in different REDS files and join them all together
pathDataDirectory <- file.path("./Models/LCM/models/datasets")
# filenamePattern <- ".+\\.rds" #All RDS files
filenamePattern <- "m.{1,}Info\\.rds" #All RDS files
retrievedFilenames <- list.files(path=pathDataDirectory, pattern=filenamePattern)
filePaths <- file.path(pathDataDirectory, retrievedFilenames)
dsInfo <- readRDS(filePaths[1])
for( i in 1:length(filePaths) ) {
# To debug, change the '6' to some number to isolate the problem: for( i in 2:6 ) {
# message("About to read", filePaths[i], "\\")
dsInfoSingle <- readRDS(filePaths[i])
dsInfo <- plyr::join(x=dsInfo, y=dsInfoSingle, by="Coefficient", type="left", match="all")
rm(dsInfoSingle)
}
mF<-   c("m0F",  "m1F",  "m2F",  "m3F",  "m4F",    "m5F",    "m6F",    "m7F")
mFi<-  c("mFa",  "mFb",  "mFc",  "mFf",  "mFd",    "mFe")
mR1<-  c("m0R1", "m1R1", "m2R1", "m3R1", "m4R1",   "m5R1",   "m6R1",   "m7R1")
mR1i<- c("mR1a", "mR1b", "mR1c", "mR1f", "mR1d",   "mR1e")
mR2<-  c("m1R2", "m2R2", "m3R2", "m4R2", "m5R2",   "m6R2",   "m7R2")
mR2i<- c("mR2b", "mR2c", "mR2f", "mR2d", "mR2e")
mR3<-  c("m2R3", "m3R3", "m4R3", "m5R3", "m6R3",   "m7R3")
mR3i<- c("mR3f", "mR3d", "mR3e")
mR4<-  c("m3R4", "m4R4", "m5R4", "m6R4", "m7R4")
## Composite lists of models
mOrder1 <- c(mF, mFi, mR1, mR1i, mR2, mR2i, mR3, mR3i, mR4)
excludeModels <- NA # c(mF, mFi)
axisModels  <- c(mOrder1)
######################################
dsWide <- dsInfo
ds <- reshape2::melt(dsWide, id.vars=c('Coefficient'))
ds <- plyr::rename(ds, replace=c( variable = "model"))
ds<- ds %>%
dplyr::filter(Coefficient %in% c( "BIC","AIC","deviance"))
ds<- ds[!(ds$model %in% excludeModels),] # exclude models from dataset
ds$Highlight <- (ds$model==modelName)
ds$Coefficient <- factor(x=ds$Coefficient, levels=c("BIC"="BIC","AIC"="AIC","deviance"="deviance"))
#   # comparing numeric values of fit indices.
#   aic<- as.numeric(as.vector(as.matrix(dsWide[dsWide$Coefficient=="AIC",])))
#   bic<- as.numeric(as.vector(as.matrix(dsWide[dsWide$Coefficient=="BIC",])))
#   dev<- as.numeric(as.vector(as.matrix(dsWide[dsWide$Coefficient=="deviance",])))
# possible pallets
# colorFit <- c("BIC"="#8da0cb", "AIC"="#fc8d62", "deviance"="#66c2a5")
#   colorFit <- c("BIC"="plum", "AIC"="goldenrod", "deviance"="lavender")
# colorFit <- c("BIC"="blue", "AIC"="tomato", "deviance"="yellow")
# colorFit <- c("BIC"="blue", "AIC"="red", "deviance"="grey")
#66c2a5
colorFit <- c("BIC"="#8da0cb", "AIC"="#fc8d62", "deviance"="#66c2a5") # Colorbrewer, 3 cat, qualit, colorblind and print friendly
# colorFit <- c("BIC"="#bebada", "AIC"="#8dd3c7", "deviance"="#ffffb3")
# colorFit <- c("BIC"="#8da0cb", "AIC"="#d95f02", "deviance"="#b2df8a")
# floor <- 1000 #Watchout when AIC is negative
floor <- min(ds$value, na.rm=T)
longestBar <- max(ds$value, na.rm=T)
barHeight <- abs(longestBar - floor)
ceiling <- longestBar + barHeight * .05 * sign(longestBar)  #Account for cases when AIC is negative
barTheme <- theme_bw() +
theme(axis.text = element_text(colour="gray40")) +
theme(axis.text.x = element_text(angle=90, vjust = .5)) +
theme(axis.title = element_text(colour="gray40")) +
theme(panel.border = element_rect(colour="gray80")) +
theme(panel.grid.major.x = element_blank()) +
# theme(axis.ticks = element_line(colour="gray80")) +
theme(axis.ticks.length = grid::unit(0, "cm")) +
theme(legend.position=c(0,0), legend.justification=c(0,0)) +
# theme(legend.background = element_rect(fill = '#99999933')) +
theme(legend.background = element_rect(fill = NA)) +
theme(legend.text = element_text(colour = 'gray40'))
g <- ggplot2::ggplot(ds, aes(x= reorder(model, value), y=value, fill= Coefficient, group=model)) +
geom_bar(stat="identity", position="identity", alpha=1) + #This line draw the distant skyscrapers
geom_bar(data=ds[ds$Highlight, ], stat="identity", position="identity", alpha=.2) + #This line draw the skyskraper that pops out.
scale_fill_manual(values=colorFit) +
scale_x_discrete(limits=mOrder1) +
scale_y_continuous(label=scales::comma) +
#Andrey:  almost never use `scale_zzzz()` to zoom.  It essentially deletes variables from the dataset, which can affect loess. p<- p + scale_y_continuous( limits = c(80000, 110000))
coord_cartesian(ylim=c(floor, ceiling)) +
guides(fill=guide_legend(title=NULL)) +
barTheme +
labs(x=NULL, y="Misfit")
return( g )
}
BuildBar(modelName="m5F")
cat("\014")
#These first few lines run only when the file is run in RStudio, !!NOT when an Rmd/Rnw file calls it!!
rm(list=ls(all=TRUE))  #Clear the variables from previous runs.
############################
## @knitr LoadPackages
require(RODBC)
require(grid)
require(lattice)
require(dplyr)
require(ggplot2)
require(gridExtra)
require(lme4)
require(reshape2)
############################
## @knitr DeclareGlobals
# load common aesthetics definitions used in the reports
source("./Models/Descriptives/AesDefine.R")
# read back the definitions
# aesDefs
############################
## @knitr LoadData
# dsL<-readRDS("./Data/Derived/dsL.rds")
# source("./Models/LCM/LCModels.R")
############################
## @knitr defineData
# numID<- 9022 # highest id value (max = 9022)
# ### Define the data that will populate the model
# ds<- dsL %>%  # chose conditions to apply in creating dataset for modeling
#   dplyr::filter(id < numID) %.% # 1:9022
#   dplyr::filter(year %in% c(2000:2011)) %.% # 1997:2011
#   dplyr::filter(sample %in% c(1)) %.% # 0-Oversample; 1-Cross-Sectional
#   dplyr::filter(race %in% c(4)) %.% # 1-Black; 2-Hispanis; 3-Mixed; 4-White
#   dplyr::filter(byear %in% c(1980:1984)) %.% # birth year 1980:1984
#   dplyr::filter(ave(!is.na(attend), id, FUN = all)) %.% # only complete trajectories
#   dplyr::mutate( # compute new variables
#     age= year-byear, # definition of age to be used in the model
# #     timec=year-2000, # metric of time is rounds of NSLY97 in years, centered at 2000
# #     timec2= timec^2,
# #     timec3= timec^3,
#     timec= age-16, # metric of time is bilogical age in years, centered at 16
#     timec2= timec^2,
#     timec3= timec^3,#
#     cohort=byear-1980) %.% # age difference, years younger (unit - 1 cohort away)
#   dplyr::select( # assemble the dataset for modeling
#     id, sample, race, byear,cohort, # Time Invariant variables
#     year,
#     age, timec,timec2,timec3, attend)  # Time Variant variables
# head(ds)
# table(ds$byear) # the year of birth  - metric: YEAR
# table(ds$age) # years past 16 -  metric: AGE
# table(ds$year, ds$age) # YEAR by  AGE
# length(unique(ds$id)) # total No. of respondents in dataset
# sum(!is.na(ds$attend)) # valid datapoints
# sum(is.na(ds$attend)) # NA in the dataset
# length(unique(ds$timec))
## FOR TESTING ###
# flmer<- as.formula(call_m5R1)
# model <-lmer (flmer, data = ds, REML=FALSE,
#               control=lmerControl(optCtrl=list(maxfun=20000)))
# modelR<-model
#
# fnlme<- as.formula(call_m5F)
# model<- nlme::gls(f, data=ds,method = "ML")
# modelF<-model
###################
# # Traditional reading in the files
# getModels<- c("m7R3")
# getAll<- modelList
#
#
# for(i in allModels){
#   modelName<- i
#   pathdsmInfo <- file.path("./Models/LCM/models/datasets",paste0(i,"_mInfo.rds"))
#   pathdsFERE  <- file.path("./Models/LCM/models/datasets",paste0(i,"_FERE.rds"))
#   pathdsp  <- file.path("./Models/LCM/models/datasets",paste0(i,"_dsp.rds"))
#   mInfoTemp<- readRDS(pathdsmInfo)
#   FERETemp<- readRDS(pathdsFERE)
#   dspTemp<- readRDS(pathdsp)
#
#   assign(paste0(i,"_mInfo"),mInfoTemp)
#   assign(paste0(i,"_FERE"),FERETemp)
#   assign(paste0(i,"_dsp"),dspTemp)
#   rm(list = c("mInfoTemp", "FERETemp", "dspTemp"))
# }
###################
# Read in different REDS files and join them all together
pathDataDirectory <- file.path("./Models/LCM/models/datasets")
# filenamePattern <- ".+\\.rds" #All RDS files
filenamePattern <- "m.{1,}Info\\.rds" #All RDS files
retrievedFilenames <- list.files(path=pathDataDirectory, pattern=filenamePattern)
filePaths <- file.path(pathDataDirectory, retrievedFilenames)
dsInfo <- readRDS(filePaths[1])
for( i in 1:length(filePaths) ) {
# To debug, change the '6' to some number to isolate the problem: for( i in 2:6 ) {
# message("About to read", filePaths[i], "\\")
dsInfoSingle <- readRDS(filePaths[i])
dsInfo <- plyr::join(x=dsInfo, y=dsInfoSingle, by="Coefficient", type="left", match="all")
rm(dsInfoSingle)
}
###################
# Read in different REDS files
pathDataDirectory <- file.path("./Models/LCM/models/datasets")
# filenamePattern <- ".+\\.rds" #All RDS files
filenamePattern <- "m.{1,}FERE\\.rds" #All RDS files
retrievedFilenames <- list.files(path=pathDataDirectory, pattern=filenamePattern)
# dsFERE <- readRDS(filePaths[1])
# requireFieldsEvenIfNA <- c("sdRE", "timec", "intVarRE", "timecVarRE", "timec2VarRE", "timec3VarRE")
lst_ds <- NULL
for( i in seq_along(retrievedFilenames) ) {
filePath <- filePaths <- file.path(pathDataDirectory, retrievedFilenames[i])
dsFERESingle <- readRDS(filePath)
dsFERESingle <- plyr::rename(dsFERESingle, replace=c("Value"="Estimate"), warn_missing=FALSE)
#TODO: convert this into a loop
if( !("sdRE" %in% colnames(dsFERESingle)) ) dsFERESingle$sdRE <- NA
if( !("timec" %in% colnames(dsFERESingle)) ) dsFERESingle$timec <- NA
if( !("intVarRE" %in% colnames(dsFERESingle)) ) dsFERESingle$intVarRE <- NA
if( !("timecVarRE" %in% colnames(dsFERESingle)) ) dsFERESingle$timecVarRE <- NA
if( !("timec2VarRE" %in% colnames(dsFERESingle)) ) dsFERESingle$timec2VarRE <- NA
if( !("timec3VarRE" %in% colnames(dsFERESingle)) ) dsFERESingle$timec3VarRE <- NA
#   for( requiredField in requireFieldsEvenIfNA ) {
#     if( !(requireField %in% colnames(dsFERESingle)) )
#       dsFERESingle[[requireField]] <- NA
#   }
lst_ds[[i]] <- dsFERESingle
rm(dsFERESingle)
}
#names(lst_ds) <- gsub(pattern="(.+)\\.rds", replacement="\\1", x=retrievedFilenames)
names(lst_ds) <- gsub(pattern="(.+)\\_FERE.rds", replacement="\\1", x=retrievedFilenames)
saveRDS(lst_ds, file="./Models/LCM/models/datasets/ListOfModelOutcomes.rds", compress="xz")
# lst_ds["m4R1_FERE"]
# modelNames
View(dsInfo)
dsWide <- dsInfo
ds <- reshape2::melt(dsWide, id.vars=c('Coefficient'))
ds <- plyr::rename(ds, replace=c( variable = "model"))
ds<- ds %>%
dplyr::filter(Coefficient %in% c( "BIC","AIC","deviance"))
ds<- ds[!(ds$model %in% excludeModels),] # exclude models from dataset
ds$Highlight <- (ds$model==modelName)
ds$Coefficient <- factor(x=ds$Coefficient, levels=c("BIC"="BIC","AIC"="AIC","deviance"="deviance"))
View(ds)
print(ds[ds$model %in% c("m0F", m1F","m2F")])
print(ds[ds$model %in% c("m0F", "m1F","m2F"),])
ds
# Read in different REDS files and join them all together
pathDataDirectory <- file.path("./Models/LCM/models/datasets")
# filenamePattern <- ".+\\.rds" #All RDS files
filenamePattern <- "m.{1,}Info\\.rds" #All RDS files
retrievedFilenames <- list.files(path=pathDataDirectory, pattern=filenamePattern)
filePaths <- file.path(pathDataDirectory, retrievedFilenames)
dsInfo <- readRDS(filePaths[1])
for( i in 1:length(filePaths) ) {
# To debug, change the '6' to some number to isolate the problem: for( i in 2:6 ) {
# message("About to read", filePaths[i], "\\")
dsInfoSingle <- readRDS(filePaths[i])
dsInfo <- plyr::join(x=dsInfo, y=dsInfoSingle, by="Coefficient", type="left", match="all")
rm(dsInfoSingle)
}
mF<-   c("m0F",  "m1F",  "m2F",  "m3F",  "m4F",    "m5F",    "m6F",    "m7F")
mFi<-  c("mFa",  "mFb",  "mFc",  "mFf",  "mFd",    "mFe")
mR1<-  c("m0R1", "m1R1", "m2R1", "m3R1", "m4R1",   "m5R1",   "m6R1",   "m7R1")
mR1i<- c("mR1a", "mR1b", "mR1c", "mR1f", "mR1d",   "mR1e")
mR2<-  c("m1R2", "m2R2", "m3R2", "m4R2", "m5R2",   "m6R2",   "m7R2")
mR2i<- c("mR2b", "mR2c", "mR2f", "mR2d", "mR2e")
mR3<-  c("m2R3", "m3R3", "m4R3", "m5R3", "m6R3",   "m7R3")
mR3i<- c("mR3f", "mR3d", "mR3e")
mR4<-  c("m3R4", "m4R4", "m5R4", "m6R4", "m7R4")
## Composite lists of models
mOrder1 <- c(mF, mFi, mR1, mR1i, mR2, mR2i, mR3, mR3i, mR4)
excludeModels <- NA # c(mF, mFi)
axisModels  <- c(mOrder1)
######################################
dsWide <- dsInfo
ds <- reshape2::melt(dsWide, id.vars=c('Coefficient'))
ds <- plyr::rename(ds, replace=c( variable = "model"))
ds<- ds %>%
dplyr::filter(Coefficient %in% c( "BIC","AIC","deviance"))
ds<- ds[!(ds$model %in% excludeModels),] # exclude models from dataset
ds$Highlight <- (ds$model==modelName)
ds$Coefficient <- factor(x=ds$Coefficient, levels=c("BIC"="BIC","AIC"="AIC","deviance"="deviance"))
require(ggplot2)
require(dplyr)
require(reshape2)
# Read in different REDS files and join them all together
pathDataDirectory <- file.path("./Models/LCM/models/datasets")
# filenamePattern <- ".+\\.rds" #All RDS files
filenamePattern <- "m.{1,}Info\\.rds" #All RDS files
retrievedFilenames <- list.files(path=pathDataDirectory, pattern=filenamePattern)
filePaths <- file.path(pathDataDirectory, retrievedFilenames)
dsInfo <- readRDS(filePaths[1])
for( i in 1:length(filePaths) ) {
# To debug, change the '6' to some number to isolate the problem: for( i in 2:6 ) {
# message("About to read", filePaths[i], "\\")
dsInfoSingle <- readRDS(filePaths[i])
dsInfo <- plyr::join(x=dsInfo, y=dsInfoSingle, by="Coefficient", type="left", match="all")
rm(dsInfoSingle)
}
mF<-   c("m0F",  "m1F",  "m2F",  "m3F",  "m4F",    "m5F",    "m6F",    "m7F")
mFi<-  c("mFa",  "mFb",  "mFc",  "mFf",  "mFd",    "mFe")
mR1<-  c("m0R1", "m1R1", "m2R1", "m3R1", "m4R1",   "m5R1",   "m6R1",   "m7R1")
mR1i<- c("mR1a", "mR1b", "mR1c", "mR1f", "mR1d",   "mR1e")
mR2<-  c("m1R2", "m2R2", "m3R2", "m4R2", "m5R2",   "m6R2",   "m7R2")
mR2i<- c("mR2b", "mR2c", "mR2f", "mR2d", "mR2e")
mR3<-  c("m2R3", "m3R3", "m4R3", "m5R3", "m6R3",   "m7R3")
mR3i<- c("mR3f", "mR3d", "mR3e")
mR4<-  c("m3R4", "m4R4", "m5R4", "m6R4", "m7R4")
## Composite lists of models
mOrder1 <- c(mF, mFi, mR1, mR1i, mR2, mR2i, mR3, mR3i, mR4)
excludeModels <- NA # c(mF, mFi)
axisModels  <- c(mOrder1)
######################################
dsWide <- dsInfo
ds <- reshape2::melt(dsWide, id.vars=c('Coefficient'))
ds <- plyr::rename(ds, replace=c( variable = "model"))
ds<- ds %>%
dplyr::filter(Coefficient %in% c( "BIC","AIC","deviance"))
ds<- ds[!(ds$model %in% excludeModels),] # exclude models from dataset
ds$Highlight <- (ds$model==modelName)
ds$Coefficient <- factor(x=ds$Coefficient, levels=c("BIC"="BIC","AIC"="AIC","deviance"="deviance"))
print(ds[ds$model %in% c("m0F", "m1F","m2F"),])
