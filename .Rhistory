#This code checks the user's installed packages against the packages listed in `./UtilityScripts/PackageDependencyList.csv`.
#   These are necessary for the repository's R code to be fully operational.
#   CRAN packages are installed only if they're not already; then they're updated if available.
#   GitHub packages are installed regardless if they're already installed.
#If anyone encounters a package that should be on there, please add it to `./UtilityScripts/PackageDependencyList.csv`
#Clear memory from previous runs,.
base::rm(list=base::ls(all=TRUE))
#####################################
## @knitr DeclareGlobals
pathCsv <- './UtilityScripts/PackageDependencyList.csv'
if( !file.exists(pathCsv))
base::stop("The path `", pathCsv, "` was not found.  Make sure the working directory is set to the root of the repository.")
#####################################
## @knitr LoadDatasets
dsPackages <- utils::read.csv(file=pathCsv, stringsAsFactors=FALSE)
rm(pathCsv)
#####################################
## @knitr TweakDatasets
dsInstallFromCran <- dsPackages[dsPackages$Install & dsPackages$OnCran, ]
dsInstallFromGitHub <- dsPackages[dsPackages$Install & !is.na(dsPackages$GitHubUsername) & nchar(dsPackages$GitHubUsername)>0, ]
rm(dsPackages)
#####################################
## @knitr InstallCranPackages
for( packageName in dsInstallFromCran$PackageName ) {
available <- base::require(packageName, character.only=TRUE) #Loads the packages, and indicates if it's available
if( !available ) {
utils::install.packages(packageName, dependencies=TRUE)
base::require( packageName, character.only=TRUE)
}
base::rm(available)
}
rm(dsInstallFromCran, packageName)
#####################################
## @knitr UpdateCranPackages
utils::update.packages(ask="graphics", checkBuilt=TRUE)
#####################################
## @knitr InstallDevtools
# Installing the devtools package is different than the rest of the packages.  On Windows,
#   the dll can't be overwritten while in use.  This function avoids that issue.
# This should follow the initial CRAN installation of `devtools`.
#   Installing the newest GitHub devtools version isn't always necessary, but it usually helps.
downloadLocation <- "./devtools.zip" #This is the default value.
devtools::build_github_devtools(downloadLocation)
base::unlink(downloadLocation, recursive=FALSE) #Remove the file from disk.
base::rm(downloadLocation)
#####################################
## @knitr InstallGitHubPackages
for( i in base::seq_len(base::nrow(dsInstallFromGitHub)) ) {
repositoryName <- dsInstallFromGitHub[i, "PackageName"]
username <- dsInstallFromGitHub[i, "GitHubUsername"]
devtools::install_github(repo=repositoryName, username=username)
base::rm(repositoryName, username)
}
base::rm(dsInstallFromGitHub, i)
#There will be a warning message for every  package that's called but not installed.  It will look like:
#    Warning message:
#        In library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
#        there is no package called 'bootstrap'
#If you see the message (either in here or in another piece of the project's code),
#   then run this again to make sure everything is installed.  You shouldn't get a warning again.
###################################
### Reproducible Research
###################################
# When executed by R, this file will manipulate the original data sources (ie, ZZZZ)
# to produce a groomed dataset suitable for analysis and graphing.
###################################
# Clear memory from previous runs
base::rm(list=base::ls(all=TRUE))
###################################
# Verify the working directory has been set correctly.  Much of the code assumes the working directory is the repository's root directory.
# In the following line, rename `RAnalysisSkeleton` to your repository.
if( base::basename(base::getwd()) != "Longitudinal_Models_of_Religiosity_NLSY97" ) {
base::stop("The working directory should be set to the root of the package/repository.  ",
"It's currently set to `", base::getwd(), "`.")
}
###################################
# Install the necessary packages.
pathInstallPackages <- "./UtilityScripts/InstallPackages.R"
if( !file.exists(pathInstallPackages)) {
base::stop("The file `", pathInstallPackages, "` was not found.  Make sure the working directory is set to the root of the repository.")
}
base::source(pathInstallPackages, local=new.env())
base::rm(pathInstallPackages)
###################################
# Load the necessary packages.
base::require(base)
base::require(knitr)
base::require(markdown)
base::require(testit)
###################################
### Reproducible Research
###################################
# When executed by R, this file will manipulate the original data sources (ie, ZZZZ)
# to produce a groomed dataset suitable for analysis and graphing.
###################################
# Clear memory from previous runs
base::rm(list=base::ls(all=TRUE))
###################################
# Verify the working directory has been set correctly.  Much of the code assumes the working directory is the repository's root directory.
# In the following line, rename `RAnalysisSkeleton` to your repository.
if( base::basename(base::getwd()) != "Longitudinal_Models_of_Religiosity_NLSY97" ) {
base::stop("The working directory should be set to the root of the package/repository.  ",
"It's currently set to `", base::getwd(), "`.")
}
###################################
# Install the necessary packages.
pathInstallPackages <- "./UtilityScripts/InstallPackages.R"
if( !file.exists(pathInstallPackages)) {
base::stop("The file `", pathInstallPackages, "` was not found.  Make sure the working directory is set to the root of the repository.")
}
base::source(pathInstallPackages, local=new.env())
base::rm(pathInstallPackages)
###################################
# Load the necessary packages.
base::require(base)
base::require(knitr)
base::require(markdown)
base::require(testit)
pathDir<-file.path(getwd())
pathDir
install.packages("knitr")
library("knitr", lib.loc="C:/Users/inspirion/Documents/R/win-library/3.1")
pathDir
dataFolder<-file.path(getwd()),NLSY97_Religiosity_20042014)
dataFolder<-file.path(getwd()),NLSY97_Religiosity_20042014))
dataFolder<-file.path(getwd(),NLSY97_Religiosity_20042014)
dataFolder<-file.path(getwd(),Documentation,data,NLSY97_Religiosity_20042014)
dataFolder<-file.path(getwd(),"Documentation\data\NLSY97_Religiosity_20042014")
dataSource<-c("Documentation\data\NLSY97_Religiosity_20042014")
dataSource<-c("Documentation\data\NLSY97_Religiosity_20042014")
base::require(base)
base::require(knitr)
base::require(markdown)
base::require(testit)
base::require(plyr)
base::require(reshape2)
pathDir<-file.path(getwd()) # change if need to call in local copy
pathDir
dataFolder<-file.path(getwd(),"Documentation\data\NLSY97_Religiosity_20042014")
dataFolder<-file.path(getwd(),Documentation\data\NLSY97_Religiosity_20042014)
dataFolder<-file.path(getwd(),Documentation,data,NLSY97_Religiosity_20042014)
dataFolder<-file.path(getwd(),paste("Documentation\data\NLSY97_Religiosity_20042014"))
dataFolder<-file.path(getwd(),paste("Documentation/data/NLSY97_Religiosity_20042014"))
dataFolder
dataFolder<-file.path(getwd(),paste("Documentation/data",tagset))
tagset<-c("NLSY97_Religiosity_20042014")
dataFolder<-file.path(getwd(),paste("Documentation/data",tagset))
dataSource
tagset
dataFolder
dataSource<-file.path(dataFolder,paste(dataFolder,tagset,tagset,".csv")
dataSource
tagset<-c("NLSY97_Religiosity_20042014")
dataFolder<-file.path(getwd(),paste0("Documentation/data",tagset))
dataSource<-file.path(dataFolder,paste(dataFolder,tagset,tagset,".csv")
dataSource
dataSource<-file.path(dataFolder,paste(dataFolder,tagset,tagset,".csv"))
dataSource
tagset<-c("NLSY97_Religiosity_20042014")
dataFolder<-file.path(getwd(),paste0("Documentation/data",tagset))
dataSource<-file.path(dataFolder,paste0(dataFolder,tagset,tagset,".csv"))
dataSource
dataFolder<-file.path(getwd(),paste0("Documentation/data",tagset))
dataSource<-file.path(dataFolder,paste0(tagset,tagset,".csv"))
dataSource
tagset<-c("NLSY97_Religiosity_20042014")
dataFolder<-file.path(getwd(),paste0("Documentation/data/",tagset))
dataSource<-file.path(dataFolder,paste0(tagset,tagset,".csv"))
varnames<-read.csv(pathDataSource,header=TRUE, skip=0,nrows=1,sep=",")
###################################
### Reproducible Research
###################################
# When executed by R, this file will manipulate the original data sources (ie, ZZZZ)
# to produce a groomed dataset suitable for analysis and graphing.
###################################
# Clear memory from previous runs
base::rm(list=base::ls(all=TRUE))
###################################
# Verify the working directory has been set correctly.  Much of the code assumes the working directory is the repository's root directory.
# In the following line, rename `RAnalysisSkeleton` to your repository.
if( base::basename(base::getwd()) != "Longitudinal_Models_of_Religiosity_NLSY97" ) {
base::stop("The working directory should be set to the root of the package/repository.  ",
"It's currently set to `", base::getwd(), "`.")
}
###################################
# Install the necessary packages.
pathInstallPackages <- "./UtilityScripts/InstallPackages.R"
if( !file.exists(pathInstallPackages)) {
base::stop("The file `", pathInstallPackages, "` was not found.  Make sure the working directory is set to the root of the repository.")
}
base::source(pathInstallPackages, local=new.env())
base::rm(pathInstallPackages)
###################################
# Load the necessary packages.
base::require(base)
base::require(knitr)
base::require(markdown)
base::require(testit)
base::require(plyr)
base::require(reshape2)
### Import the data ##
pathDir<-file.path(getwd()) # change if need to call in local copy
# Links to the data source
tagset<-c("NLSY97_Religiosity_20042014")
pathdataFolder<-file.path(getwd(),paste0("Documentation/data/",tagset))
pathdataSource<-file.path(dataFolder,paste0(tagset,tagset,".csv"))
varnames<-read.csv(pathDataSource,header=TRUE, skip=0,nrows=1,sep=",")
tagset<-c("NLSY97_Religiosity_20042014")
pathdataFolder<-file.path(getwd(),paste0("Documentation/data/",tagset))
pathdataSource<-file.path(pathdataFolder,paste0(tagset,tagset,".csv"))
varnames<-read.csv(pathDataSource,header=TRUE, skip=0,nrows=1,sep=",")
pathdataSource
###################################
### Reproducible Research
###################################
# When executed by R, this file will manipulate the original data sources (ie, ZZZZ)
# to produce a groomed dataset suitable for analysis and graphing.
###################################
# Clear memory from previous runs
base::rm(list=base::ls(all=TRUE))
###################################
# Verify the working directory has been set correctly.  Much of the code assumes the working directory is the repository's root directory.
# In the following line, rename `RAnalysisSkeleton` to your repository.
if( base::basename(base::getwd()) != "Longitudinal_Models_of_Religiosity_NLSY97" ) {
base::stop("The working directory should be set to the root of the package/repository.  ",
"It's currently set to `", base::getwd(), "`.")
}
###################################
# Install the necessary packages.
pathInstallPackages <- "./UtilityScripts/InstallPackages.R"
if( !file.exists(pathInstallPackages)) {
base::stop("The file `", pathInstallPackages, "` was not found.  Make sure the working directory is set to the root of the repository.")
}
base::source(pathInstallPackages, local=new.env())
base::rm(pathInstallPackages)
###################################
# Load the necessary packages.
base::require(base)
base::require(knitr)
base::require(markdown)
base::require(testit)
base::require(plyr)
base::require(reshape2)
### Import the data ##
pathDir<-file.path(getwd()) # change if need to call in local copy
# Links to the data source
tagset<-c("NLSY97_Religiosity_20042014")
pathDataFolder<-file.path(getwd(),paste0("Documentation/data/",tagset))
pathDataSource<-file.path(pathdataFolder,paste0(tagset,tagset,".csv"))
varnames<-read.csv(pathDataSource,header=TRUE, skip=0,nrows=1,sep=",")
# Links to the data source
tagset<-c("NLSY97_Religiosity_20042014")
pathDataFolder<-file.path(getwd(),paste0("Documentation/data/",tagset))
pathDataSource<-file.path(pathDataFolder,paste0(tagset,tagset,".csv"))
varnames<-read.csv(pathDataSource,header=TRUE, skip=0,nrows=1,sep=",")
pathDataSource<-file.path(pathDataFolder,paste0(tagset,".csv"))
varnames<-read.csv(pathDataSource,header=TRUE, skip=0,nrows=1,sep=",")
View(varnames)
varnames<-read.csv(pathDataSource,header=FALSE, skip=0,nrows=1,sep=",")
View(varnames)
dsSource<-read.csv(pathDataSource,header=TRUE, skip=0,sep=" ")
View(dsSource)
dsSource<-read.csv(pathDataSource,header=TRUE, skip=0,sep=",")
View(dsSource)
nams<-names(dsSource)
nams
pathDataSourceLabels<-file.path(pathDataFolder,paste0(tagset,".dtc"))  # dictionary file produced with NLSY97 download
dsSourceLabels<-read.table(pathDataSourceLabels,header=TRUE, skip=0,sep="")
pathDataSourceLabels<-file.path(pathDataFolder,paste0(tagset,".dtc"))  # dictionary file produced with NLSY97 download
pathDataSourceLabels
dsSourceLabels<-read.table(pathDataSourceLabels,header=TRUE, skip=0,sep="")
pathDataSourceLabels
pathDataSourceLabels<-file.path(pathDataFolder,paste0(tagset,".dtc"))  # dictionary file produced with NLSY97 download
dsSourceLabels<-read.table(pathDataSourceLabels,header=TRUE, skip=0,sep="")
pathDataSourceLabels<-file.path(pathDataFolder,paste0(tagset,".dct"))  # dictionary file produced with NLSY97 download
dsSourceLabels<-read.table(pathDataSourceLabels,header=TRUE, skip=0,sep="")
dsSourceLabels<-read.table(pathDataSourceLabels,header=TRUE, skip=0,sep="""")
dsSourceLabels<-read.table(pathDataSourceLabels,header=TRUE, skip=0,sep="")
dsSourceLabels<-read.csv(pathDataSourceLabels,header=TRUE, skip=0,sep="")
View(dsSourceLabels)
dsSourceLabels<-dsSourceLabels[,1-2]
View(dsSourceLabels)
dsSourceLabels<-read.csv(pathDataSourceLabels,header=TRUE, skip=0,nrows=101, sep="")
dsSourceLabels<-dsSourceLabels[,c(1,2)]
print (dsSourceLabels)
dsSourceLabels<-sort(dsSourceLabels[,c(1,2)],dictionary)
dsSourceLabels<-sort(dsSourceLabels[,c(1,2)],dictionary)
dsSourceLabels<-sort(dsSourceLabels[,c(1,2)],"dictionary")
dsSourceLabels<-read.csv(pathDataSourceLabels,header=TRUE, skip=0,nrows=101, sep="")
dsSourceLabels<-sort(dsSourceLabels[,c(1,2)],"dictionary")
dsSourceLabels<-sort(dsSourceLabels[,c(1,2)],x="dictionary")
